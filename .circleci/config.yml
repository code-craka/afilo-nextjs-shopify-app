version: 2.1

# ========================================
# AFILO ENTERPRISE MARKETPLACE - CIRCLECI CONFIGURATION
# ========================================
# Version: 1.0.0
# Project: afilo-nextjs-shopify-app
# Stack: Next.js 15 + TypeScript + Shopify + Stripe
# Package Manager: pnpm 8.15.6 (REQUIRED)
# ========================================

# Orbs - Reusable packages of CircleCI configuration
orbs:
  node: circleci/node@7.2.0

# ========================================
# EXECUTORS - Reusable execution environments
# ========================================
executors:
  node-executor:
    docker:
      - image: cimg/node:18.17
    working_directory: ~/afilo-nextjs-shopify-app
    resource_class: medium
    shell: /bin/bash -eo pipefail
    environment:
      SHELL: /bin/bash
      NODE_ENV: production
      PNPM_VERSION: 8.15.6
      # Fallback values for build (real values from CircleCI env vars)
      NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN: ${NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN:-placeholder.myshopify.com}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY:-pk_test_placeholder}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:-pk_test_placeholder}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-https://app.afilo.io}

# ========================================
# COMMANDS - Reusable command sequences
# ========================================
commands:
  install-pnpm:
    description: "Install pnpm package manager"
    steps:
      - run:
          name: Install pnpm
          shell: /bin/bash -eo pipefail
          command: |
            echo "Installing pnpm ${PNPM_VERSION}..."
            export SHELL=/bin/bash
            curl -fsSL https://get.pnpm.io/install.sh | env PNPM_VERSION=${PNPM_VERSION} SHELL=/bin/bash sh -
            echo 'export PNPM_HOME="$HOME/.local/share/pnpm"' >> $BASH_ENV
            echo 'export PATH="$PNPM_HOME:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            pnpm --version
            echo "‚úÖ pnpm installed successfully"

  restore-dependencies:
    description: "Restore cached dependencies"
    steps:
      - restore_cache:
          name: Restore pnpm cache
          keys:
            - pnpm-v1-{{ checksum "pnpm-lock.yaml" }}
            - pnpm-v1-

  install-dependencies:
    description: "Install project dependencies with pnpm"
    steps:
      - run:
          name: Install dependencies
          command: |
            echo "Installing dependencies with pnpm..."
            pnpm install --frozen-lockfile
            echo "‚úÖ Dependencies installed successfully"

  save-dependencies:
    description: "Save dependencies to cache"
    steps:
      - save_cache:
          name: Save pnpm cache
          key: pnpm-v1-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - ~/.local/share/pnpm/store
            - ~/.pnpm-store
            - node_modules

# ========================================
# JOBS - Individual CI/CD tasks
# ========================================
jobs:
  # Job 1: Install dependencies and cache
  install:
    executor: node-executor
    steps:
      - checkout
      - install-pnpm
      - restore-dependencies
      - install-dependencies
      - save-dependencies
      - persist_to_workspace:
          root: ~/afilo-nextjs-shopify-app
          paths:
            - node_modules
            - .next

  # Job 2: Type checking
  type-check:
    executor: node-executor
    steps:
      - checkout
      - install-pnpm
      - attach_workspace:
          at: ~/afilo-nextjs-shopify-app
      - run:
          name: TypeScript Type Check
          command: |
            echo "üîç Running TypeScript type check..."
            pnpm type-check
            echo "‚úÖ Type check passed"

  # Job 3: Linting
  lint:
    executor: node-executor
    steps:
      - checkout
      - install-pnpm
      - attach_workspace:
          at: ~/afilo-nextjs-shopify-app
      - run:
          name: ESLint Check
          command: |
            echo "üîç Running ESLint..."
            pnpm lint
            echo "‚úÖ Linting passed"

  # Job 4: Prettier check
  prettier-check:
    executor: node-executor
    steps:
      - checkout
      - install-pnpm
      - attach_workspace:
          at: ~/afilo-nextjs-shopify-app
      - run:
          name: Prettier Format Check
          command: |
            echo "üîç Checking code formatting..."
            pnpm prettier:check
            echo "‚úÖ Code formatting is correct"

  # Job 5: Security audit
  security-audit:
    executor: node-executor
    steps:
      - checkout
      - install-pnpm
      - attach_workspace:
          at: ~/afilo-nextjs-shopify-app
      - run:
          name: Security Audit
          command: |
            echo "üîí Running security audit..."
            pnpm audit --audit-level=moderate || true
            echo "‚úÖ Security audit complete"

  # Job 6: Build application
  build:
    executor: node-executor
    resource_class: large
    steps:
      - checkout
      - install-pnpm
      - attach_workspace:
          at: ~/afilo-nextjs-shopify-app
      - run:
          name: Build Next.js Application
          command: |
            echo "üèóÔ∏è Building Next.js application..."
            echo "Environment check:"
            echo "NODE_ENV=$NODE_ENV"
            echo "NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN=$NEXT_PUBLIC_SHOPIFY_STORE_DOMAIN"
            pnpm build
            echo "‚úÖ Build completed successfully"
      - persist_to_workspace:
          root: ~/afilo-nextjs-shopify-app
          paths:
            - .next
            - public

  # Job 7: Run tests (when implemented)
  test:
    executor: node-executor
    steps:
      - checkout
      - install-pnpm
      - attach_workspace:
          at: ~/afilo-nextjs-shopify-app
      - run:
          name: Run Tests
          command: |
            echo "üß™ Running tests..."
            pnpm test
            echo "‚úÖ Tests passed"
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage

  # Job 8: Deploy to Vercel (Production)
  deploy-production:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Deploy to Vercel Production
          command: |
            echo "üöÄ Deploying to Vercel Production..."
            echo "‚ö†Ô∏è  Vercel deployment is handled automatically via GitHub integration"
            echo "‚úÖ Production deployment triggered"

  # Job 9: Deploy to Vercel (Staging)
  deploy-staging:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Deploy to Vercel Staging
          command: |
            echo "üöÄ Deploying to Vercel Staging..."
            echo "‚ö†Ô∏è  Vercel deployment is handled automatically via GitHub integration"
            echo "‚úÖ Staging deployment triggered"

# ========================================
# WORKFLOWS - Orchestrate jobs
# ========================================
workflows:
  # Main CI/CD Pipeline
  build-test-deploy:
    jobs:
      # Step 1: Install dependencies (runs on all branches)
      - install:
          filters:
            branches:
              only:
                - main
                - staging
                - develop
                - /feature\/.*/

      # Step 2: Parallel quality checks (depends on install)
      - type-check:
          requires:
            - install
      - lint:
          requires:
            - install
      - prettier-check:
          requires:
            - install
      - security-audit:
          requires:
            - install

      # Step 3: Build application (depends on quality checks)
      - build:
          requires:
            - type-check
            - lint
            - prettier-check

      # Step 4: Run tests (depends on build)
      - test:
          requires:
            - build

      # Step 5: Deploy to staging (only on staging branch)
      - deploy-staging:
          requires:
            - test
          filters:
            branches:
              only: staging

      # Step 6: Deploy to production (only on main branch)
      - deploy-production:
          requires:
            - test
          filters:
            branches:
              only: main

  # Nightly Security Audit
  nightly-security:
    triggers:
      - schedule:
          cron: "0 2 * * *" # Run at 2 AM UTC every day
          filters:
            branches:
              only:
                - main
    jobs:
      - install
      - security-audit:
          requires:
            - install

  # Weekly Dependency Update Check
  weekly-dependency-check:
    triggers:
      - schedule:
          cron: "0 3 * * 1" # Run at 3 AM UTC every Monday
          filters:
            branches:
              only:
                - main
    jobs:
      - install
      - security-audit:
          requires:
            - install
